{"version":3,"sources":["components/Header.jsx","components/Geo.jsx","components/Nav.jsx","App.jsx","index.jsx"],"names":["useStyles","makeStyles","title","flexGrow","Header","appName","styles","AppBar","position","Toolbar","Typography","variant","className","map","height","width","onEachFeature","feature","layer","name","properties","bindPopup","Geo","coords","zoom","onCreated","featureOpened","BaseLayer","LayersControl","Overlay","Map","center","key","hash","checked","TileLayer","url","attribution","tokens","mapbox","GeoJSON","data","color","FeatureGroup","JSON","parse","Nav","onOpen","onSave","List","component","ListItem","button","onClick","ListItemIcon","FolderOpen","ListItemText","primary","Save","App","props","state","featureDrawn","bind","input","document","createElement","type","click","onchange","e","file","target","files","fileReader","FileReader","readAsText","onload","setState","result","this","stringify","toGeoJSON","encodeURIComponent","link","href","download","CssBaseline","Grid","container","item","xs","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9787ac2e.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst Header = ({ appName }) => {\n  // hooks\n  const styles = useStyles();\n\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={styles.title}>\n            { appName }\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </>\n  );\n};\n\n// avoids eslint warning about props\nHeader.propTypes = {\n  appName: PropTypes.string.isRequired,\n};\n\nexport default Header;\n","import React from 'react';\nimport {\n  Map,\n  TileLayer,\n  GeoJSON,\n  LayersControl,\n  FeatureGroup,\n} from 'react-leaflet';\nimport { EditControl } from 'react-leaflet-draw';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport hash from 'object-hash';\n\n// import assets\nimport map from '../assets/maps/countries.geo.json';\nimport tokens from '../assets/access/tokens.json';\n\n// custom css\nconst useStyles = makeStyles(() => ({\n  map: {\n    height: 500,\n    width: '100%',\n  },\n}));\n\nconst onEachFeature = (feature, layer) => {\n  // show popup on click\n  const { name } = feature.properties;\n  layer.bindPopup(`${name}`);\n};\n\nconst Geo = ({\n  coords,\n  zoom,\n  onCreated,\n  featureOpened,\n}) => {\n  // hooks\n  const styles = useStyles();\n\n  // layer control checkboxes\n  const { BaseLayer, Overlay } = LayersControl;\n\n  // key used to reload map once new feature opened\n  return (\n    <Map\n      center={coords}\n      zoom={zoom}\n      className={styles.map}\n      key={hash(featureOpened)}\n    >\n      <LayersControl>\n        <BaseLayer checked name=\"OpenStreetMap\">\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          />\n        </BaseLayer>\n        <BaseLayer name=\"Hillshading\">\n          <TileLayer\n            url=\"http://tiles.wmflabs.org/hillshading/{z}/{x}/{y}.png\"\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          />\n        </BaseLayer>\n        {\n          tokens.mapbox !== '' && (\n            <BaseLayer name=\"Mapbox satellite\">\n              <TileLayer\n                url={`https://api.mapbox.com/styles/v1/mapbox/satellite-streets-v11/tiles/{z}/{x}/{y}?access_token=${tokens.mapbox}`}\n                attribution='Imagery &amp;copy <a href=\"https://www.mapbox.com/\">Mapbox</a>'\n              />\n            </BaseLayer>\n          )\n        }\n\n        <Overlay name=\"Countries (green)\">\n          <GeoJSON\n            data={map}\n            onEachFeature={onEachFeature}\n            color=\"green\"\n          />\n        </Overlay>\n\n        <Overlay checked name=\"Features drawn (blue)\">\n          <FeatureGroup>\n            <EditControl\n              onCreated={onCreated}\n            />\n          </FeatureGroup>\n        </Overlay>\n\n        {\n          featureOpened !== ''\n          && (\n            <Overlay checked name=\"Features opened (red)\">\n              <GeoJSON\n                data={JSON.parse(featureOpened)}\n                color=\"red\"\n              />\n            </Overlay>\n          )\n        }\n      </LayersControl>\n    </Map>\n  );\n};\n\n// props validation\nGeo.propTypes = {\n  coords: PropTypes.arrayOf(PropTypes.number).isRequired,\n  zoom: PropTypes.number.isRequired,\n  onCreated: PropTypes.func.isRequired,\n  featureOpened: PropTypes.string.isRequired,\n};\n\nexport default Geo;\n","import React from 'react';\nimport {\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n} from '@material-ui/core';\nimport { Save, FolderOpen } from '@material-ui/icons';\nimport PropTypes from 'prop-types';\n\nconst Nav = ({ onOpen, onSave }) => (\n  <>\n    <List component=\"nav\">\n      <ListItem button onClick={onOpen}>\n        <ListItemIcon>\n          <FolderOpen />\n        </ListItemIcon>\n        <ListItemText primary=\"Open\" />\n      </ListItem>\n      <ListItem button onClick={onSave}>\n        <ListItemIcon>\n          <Save />\n        </ListItemIcon>\n        <ListItemText primary=\"Save\" />\n      </ListItem>\n    </List>\n  </>\n);\n\n// props validation\nNav.propTypes = {\n  onOpen: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n};\n\nexport default Nav;\n","import React from 'react';\nimport {\n  CssBaseline,\n  Grid,\n} from '@material-ui/core';\nimport {\n  Header,\n  Geo,\n  Nav,\n} from './components';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // init state\n    this.state = {\n      featureOpened: '',\n      featureDrawn: '',\n    };\n\n    // binding to use this keyword in callbacks\n    this.onCreated = this.onCreated.bind(this);\n    this.onOpen = this.onOpen.bind(this);\n    this.onSave = this.onSave.bind(this);\n  }\n\n  onOpen() {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.click();\n    input.onchange = (e) => {\n      // read content of selected file\n      const file = e.target.files[0];\n      const fileReader = new FileReader();\n      fileReader.readAsText(file);\n      fileReader.onload = () => {\n        this.setState({\n          featureOpened: fileReader.result,\n        });\n      };\n    };\n  }\n\n  onCreated(e) {\n    // save drawn feature in state\n    this.setState({\n      featureDrawn: JSON.stringify(e.layer.toGeoJSON()),\n    });\n  }\n\n  onSave() {\n    const { featureDrawn } = this.state;\n    if (featureDrawn === '') {\n      return;\n    }\n\n    // download geojson feature drawn\n    const data = `data:text/json;charset=utf-8,${encodeURIComponent(featureDrawn)}`;\n    const link = document.createElement('a');\n    link.href = data;\n    link.download = 'feature.geo.json';\n    link.click();\n  }\n\n  render() {\n    const { featureOpened } = this.state;\n\n    return (\n      <>\n        <CssBaseline />\n        <Header appName=\"Maps\" />\n\n        <Grid container>\n          <Grid item xs={10}>\n            <Geo\n              coords={[36, 3]}\n              zoom={5}\n              onCreated={this.onCreated}\n              featureOpened={featureOpened}\n            />\n          </Grid>\n          <Grid item xs={2}>\n            <Nav\n              onOpen={this.onOpen}\n              onSave={this.onSave}\n            />\n          </Grid>\n        </Grid>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}